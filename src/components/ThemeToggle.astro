---
import Icon from './Icon.astro';
---

<theme-toggle>
	<button>
		<span class="sr-only">Dark theme</span>
		<span class="icon light"><Icon icon="sun" /></span>
		<span class="icon dark"><Icon icon="moon-stars" /></span>
	</button>
</theme-toggle>

<style>
	button {
		display: flex;
		border: 0;
		border-radius: 999rem;
		padding: 0;
		background-color: var(--gray-999);
		box-shadow: inset 0 0 0 1px var(--accent-overlay);
		cursor: pointer;
	}

	.icon {
		z-index: 1;
		position: relative;
		display: flex;
		padding: 0.5rem;
		width: 2rem;
		height: 2rem;
		font-size: 1rem;
		color: var(--accent-overlay);
	}

	.icon.light::before {
		content: '';
		z-index: -1;
		position: absolute;
		inset: 0;
		background-color: var(--accent-regular);
		border-radius: 999rem;
	}

	:global(.theme-dark) .icon.light::before {
		transform: translateX(100%);
	}

	:global(.theme-dark) .icon.dark,
	:global(html:not(.theme-dark)) .icon.light,
	button[aria-pressed='false'] .icon.light {
		color: var(--accent-text-over);
	}

	@media (prefers-reduced-motion: no-preference) {
		.icon,
		.icon.light::before {
			transition:
				transform var(--theme-transition),
				color var(--theme-transition);
		}
	}

	@media (forced-colors: active) {
		.icon.light::before {
			background-color: SelectedItem;
		}
	}
</style>

<script>
	class ThemeToggle extends HTMLElement {
	  constructor() {
		super();
  
		// Buscar el botón dentro del componente y manejar posibles valores nulos
		const button = this.querySelector('button');
		if (!button) {
		  console.error("No se encontró el botón dentro del ThemeToggle.");
		  return;
		}
  
		// Verificar si el tema oscuro está activo
		const isDarkMode = (): boolean =>
		  document.documentElement.classList.contains('theme-dark');
  
		// Aplicar el tema y guardarlo en localStorage
		const setTheme = (dark: boolean): void => {
		  const theme = dark ? 'theme-dark' : 'theme-light';
		  document.documentElement.classList.remove('theme-dark', 'theme-light');
		  document.documentElement.classList.add(theme);
		  localStorage.setItem('theme', theme); // Guardar el tema en localStorage
		  button.setAttribute('aria-pressed', String(dark)); // Actualizar estado del botón
		};
  
		// Cambiar el tema al hacer clic en el botón
		button.addEventListener('click', () => {
		  setTheme(!isDarkMode());
		});
  
		// Inicializar el estado del botón y aplicar el tema guardado
		const savedTheme = localStorage.getItem('theme');
		if (savedTheme) {
		  setTheme(savedTheme === 'theme-dark');
		} else {
		  // Tema por defecto según preferencia del sistema
		  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
		  setTheme(prefersDark);
		}
	  }
	}
  
	// Registrar el componente como un elemento personalizado
	customElements.define('theme-toggle', ThemeToggle);
  </script>
  
